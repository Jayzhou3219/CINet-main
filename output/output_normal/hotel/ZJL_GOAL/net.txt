ZJL_GOAL(
  (input_embedding_layer_temporal): Linear(in_features=2, out_features=32, bias=True)
  (relu): ReLU()
  (dropout_input_temporal): Dropout(p=0, inplace=False)
  (input_embedding_layer_spatial): Linear(in_features=2, out_features=32, bias=True)
  (dropout_input_spatial): Dropout(p=0, inplace=False)
  (project): Linear(in_features=2, out_features=64, bias=True)
  (goal_module): UNet(
    (encoder): Encoder(
      (enc_blocks): ModuleList(
        (0): DoubleConv(
          (block): Sequential(
            (0): Conv2d(7, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (1): DoubleConv(
          (block): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (2): DoubleConv(
          (block): Sequential(
            (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (3): DoubleConv(
          (block): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (4): DoubleConv(
          (block): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
      )
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (decoder): Decoder(
      (upconvs): ModuleList(
        (0): UpConv(
          (up): Sequential(
            (0): Upsample(scale_factor=2.0, mode=bilinear)
            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): UpConv(
          (up): Sequential(
            (0): Upsample(scale_factor=2.0, mode=bilinear)
            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): UpConv(
          (up): Sequential(
            (0): Upsample(scale_factor=2.0, mode=bilinear)
            (1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): UpConv(
          (up): Sequential(
            (0): Upsample(scale_factor=2.0, mode=bilinear)
            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (dec_blocks): ModuleList(
        (0): DoubleConv(
          (block): Sequential(
            (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (1): DoubleConv(
          (block): Sequential(
            (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (2): DoubleConv(
          (block): Sequential(
            (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
        (3): DoubleConv(
          (block): Sequential(
            (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
          )
        )
      )
    )
    (head): OutputLayer(
      (out_layer): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (cross_atten): MultiheadAttention(
    (out_proj): _LinearWithBias(in_features=64, out_features=64, bias=True)
  )
  (fusion_layer): Linear(in_features=64, out_features=32, bias=True)
  (output_layer): Linear(in_features=80, out_features=2, bias=True)
)